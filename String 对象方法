string对象方法---------

1.charAt()
2.charCodeAt()
3.concat()
4.fromCharAt()
5.indexOf()
6.lastIndexOf()
7.match()
8.replace()
9.slice()
10.split()
11.substr()
12.substring()
13.toLowerCase()
14.toUpperCase()






定义和用法---------
charAt() 方法可返回指定位置的字符。

请注意，JavaScript 并没有一种有别于字符串类型的字符数据类型，所以返回的字符是长度为 1 的字符串。

语法
stringObject.charAt(index)
参数	描述
index	必需。表示字符串中某个位置的数字，即字符在字符串中的下标。
提示和注释
注释：字符串中第一个字符的下标是 0。如果参数 index 不在 0 与 string.length 之间，该方法将返回一个空字符串。

实例
在字符串 "Hello world!" 中，我们将返回位置 1 的字符：

<script type="text/javascript">

var str="Hello world!"
document.write(str.charAt(1))

</script>
以上代码的输出是：

e

---------------------------

定义和用法
charCodeAt() 方法可返回指定位置的字符的 Unicode 编码。这个返回值是 0 - 65535 之间的整数。

方法 charCodeAt() 与 charAt() 方法执行的操作相似，只不过前者返回的是位于指定位置的字符的编码，而后者返回的是字符子串。

语法
stringObject.charCodeAt(index)
参数	描述
index	必需。表示字符串中某个位置的数字，即字符在字符串中的下标。
提示和注释
注释：字符串中第一个字符的下标是 0。如果 index 是负数，或大于等于字符串的长度，则 charCodeAt() 返回 NaN。

实例
在字符串 "Hello world!" 中，我们将返回位置 1 的字符的 Unicode 编码：

<script type="text/javascript">

var str="Hello world!"
document.write(str.charCodeAt(1))

</script>
以上代码的输出是：

101

-------------------------------------

定义和用法
concat() 方法用于连接两个或多个字符串。

语法
stringObject.concat(stringX,stringX,...,stringX)
参数	描述
stringX	必需。将被连接为一个字符串的一个或多个字符串对象。
concat() 方法将把它的所有参数转换成字符串，然后按顺序连接到字符串 stringObject 的尾部，并返回连接后的字符串。请注意，stringObject 本身并没有被更改。

stringObject.concat() 与 Array.concat() 很相似。

提示和注释
提示：请注意，使用 " + " 运算符来进行字符串的连接运算通常会更简便一些。

实例
在本例中，我们将创建两个字符串，然后使用 concat() 把它们显示为一个字符串：

<script type="text/javascript">

var str1="Hello "
var str2="world!"
document.write(str1.concat(str2))

</script>
以上代码的输出是：

Hello world!

-----------------------------------------

定义和用法
fromCharCode() 可接受一个指定的 Unicode 值，然后返回一个字符串。

语法
String.fromCharCode(numX,numX,...,numX)
参数	描述
numX	必需。一个或多个 Unicode 值，即要创建的字符串中的字符的 Unicode 编码。
提示和注释
注释：该方法是 String 的静态方法，字符串中的每个字符都由单独的数字 Unicode 编码指定。

它不能作为您已创建的 String 对象的方法来使用。因此它的语法应该是 String.fromCharCode()，而不是 myStringObject.fromCharCode()。

实例
在本例中，我们将根据 Unicode 来输出 "HELLO" 和 "ABC"：

<script type="text/javascript">

document.write(String.fromCharCode(72,69,76,76,79))
document.write("<br />")
document.write(String.fromCharCode(65,66,67))

</script>
以上代码的输出：

HELLO
ABC

---------------------------------------

定义和用法
indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。

语法
stringObject.indexOf(searchvalue,fromindex)
参数	描述
searchvalue	必需。规定需检索的字符串值。
fromindex	可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的首字符开始检索。
说明
该方法将从头到尾地检索字符串 stringObject，看它是否含有子串 searchvalue。开始检索的位置在字符串的 fromindex 处或字符串的开头（没有指定 fromindex 时）。如果找到一个 searchvalue，则返回 searchvalue 的第一次出现的位置。stringObject 中的字符位置是从 0 开始的。

提示和注释
注释：indexOf() 方法对大小写敏感！

注释：如果要检索的字符串值没有出现，则该方法返回 -1。

实例
在本例中，我们将在 "Hello world!" 字符串内进行不同的检索：

<script type="text/javascript">

var str="Hello world!"
document.write(str.indexOf("Hello") + "<br />")
document.write(str.indexOf("World") + "<br />")
document.write(str.indexOf("world"))

</script>
以上代码的输出：

0
-1
6

------------------------------------------------

定义和用法
indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。

语法
stringObject.indexOf(searchvalue,fromindex)
参数	描述
searchvalue	必需。规定需检索的字符串值。
fromindex	可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的首字符开始检索。
说明
该方法将从头到尾地检索字符串 stringObject，看它是否含有子串 searchvalue。开始检索的位置在字符串的 fromindex 处或字符串的开头（没有指定 fromindex 时）。如果找到一个 searchvalue，则返回 searchvalue 的第一次出现的位置。stringObject 中的字符位置是从 0 开始的。

提示和注释
注释：indexOf() 方法对大小写敏感！

注释：如果要检索的字符串值没有出现，则该方法返回 -1。

实例
在本例中，我们将在 "Hello world!" 字符串内进行不同的检索：

<script type="text/javascript">

var str="Hello world!"
document.write(str.indexOf("Hello") + "<br />")
document.write(str.indexOf("World") + "<br />")
document.write(str.indexOf("world"))

</script>
以上代码的输出：

0
-1
6

----------------------------------------------------

定义和用法
match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。

该方法类似 indexOf() 和 lastIndexOf()，但是它返回指定的值，而不是字符串的位置。

语法
stringObject.match(searchvalue)
stringObject.match(regexp)
参数	描述
searchvalue	必需。规定要检索的字符串值。
regexp	必需。规定要匹配的模式的 RegExp 对象。如果该参数不是 RegExp 对象，则需要首先把它传递给 RegExp 构造函数，将其转换为 RegExp 对象。
返回值
存放匹配结果的数组。该数组的内容依赖于 regexp 是否具有全局标志 g。

说明
match() 方法将检索字符串 stringObject，以找到一个或多个与 regexp 匹配的文本。这个方法的行为在很大程度上有赖于 regexp 是否具有标志 g。

如果 regexp 没有标志 g，那么 match() 方法就只能在 stringObject 中执行一次匹配。如果没有找到任何匹配的文本， match() 将返回 null。否则，它将返回一个数组，其中存放了与它找到的匹配文本有关的信息。该数组的第 0 个元素存放的是匹配文本，而其余的元素存放的是与正则表达式的子表达式匹配的文本。除了这些常规的数组元素之外，返回的数组还含有两个对象属性。index 属性声明的是匹配文本的起始字符在 stringObject 中的位置，input 属性声明的是对 stringObject 的引用。

如果 regexp 具有标志 g，则 match() 方法将执行全局检索，找到 stringObject 中的所有匹配子字符串。若没有找到任何匹配的子串，则返回 null。如果找到了一个或多个匹配子串，则返回一个数组。不过全局匹配返回的数组的内容与前者大不相同，它的数组元素中存放的是 stringObject 中所有的匹配子串，而且也没有 index 属性或 input 属性。

注意：在全局检索模式下，match() 即不提供与子表达式匹配的文本的信息，也不声明每个匹配子串的位置。如果您需要这些全局检索的信息，可以使用 RegExp.exec()。

实例
例子 1
在本例中，我们将在 "Hello world!" 中进行不同的检索：

<script type="text/javascript">

var str="Hello world!"
document.write(str.match("world") + "<br />")
document.write(str.match("World") + "<br />")
document.write(str.match("worlld") + "<br />")
document.write(str.match("world!"))

</script>
输出：

world
null
null
world!
例子 2
在本例中，我们将使用全局匹配的正则表达式来检索字符串中的所有数字：

<script type="text/javascript">

var str="1 plus 2 equal 3"
document.write(str.match(/\d+/g))

</script>
输出：

1,2,3

---------------------------------------------------

定义和用法.  不改变原数组！！
replace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。

语法
stringObject.replace(regexp/substr,replacement)
参数	描述
regexp/substr	
必需。规定子字符串或要替换的模式的 RegExp 对象。

请注意，如果该值是一个字符串，则将它作为要检索的直接量文本模式，而不是首先被转换为 RegExp 对象。

replacement	必需。一个字符串值。规定了替换文本或生成替换文本的函数。
返回值
一个新的字符串，是用 replacement 替换了 regexp 的第一次匹配或所有匹配之后得到的。

说明
字符串 stringObject 的 replace() 方法执行的是查找并替换的操作。它将在 stringObject 中查找与 regexp 相匹配的子字符串，然后用 replacement 来替换这些子串。如果 regexp 具有全局标志 g，那么 replace() 方法将替换所有匹配的子串。否则，它只替换第一个匹配子串。

replacement 可以是字符串，也可以是函数。如果它是字符串，那么每个匹配都将由字符串替换。但是 replacement 中的 $ 字符具有特定的含义。如下表所示，它说明从模式匹配得到的字符串将用于替换。

字符	替换文本
$1、$2、...、$99	与 regexp 中的第 1 到第 99 个子表达式相匹配的文本。
$&	与 regexp 相匹配的子串。
$`	位于匹配子串左侧的文本。
$'	位于匹配子串右侧的文本。
$$	直接量符号。
注意：ECMAScript v3 规定，replace() 方法的参数 replacement 可以是函数而不是字符串。在这种情况下，每个匹配都调用该函数，它返回的字符串将作为替换文本使用。该函数的第一个参数是匹配模式的字符串。接下来的参数是与模式中的子表达式匹配的字符串，可以有 0 个或多个这样的参数。接下来的参数是一个整数，声明了匹配在 stringObject 中出现的位置。最后一个参数是 stringObject 本身。

实例
例子 1
在本例中，我们将使用 "W3School" 替换字符串中的 "Microsoft"：

<script type="text/javascript">

var str="Visit Microsoft!"
document.write(str.replace(/Microsoft/, "W3School"))

</script>
输出：

Visit W3School!
例子 2
在本例中，我们将执行一次全局替换，每当 "Microsoft" 被找到，它就被替换为 "W3School"：

<script type="text/javascript">

var str="Welcome to Microsoft! "
str=str + "We are proud to announce that Microsoft has "
str=str + "one of the largest Web Developers sites in the world."

document.write(str.replace(/Microsoft/g, "W3School"))

</script>
输出：

Welcome to W3School! We are proud to announce that W3School
has one of the largest Web Developers sites in the world.
例子 3
您可以使用本例提供的代码来确保匹配字符串大写字符的正确：

text = "javascript Tutorial";
text.replace(/javascript/i, "JavaScript");
例子 4
在本例中，我们将把 "Doe, John" 转换为 "John Doe" 的形式：

name = "Doe, John";
name.replace(/(\w+)\s*, \s*(\w+)/, "$2 $1");
例子 5
在本例中，我们将把所有的花引号替换为直引号：

name = '"a", "b"';
name.replace(/"([^"]*)"/g, "'$1'");
例子 6
在本例中，我们将把字符串中所有单词的首字母都转换为大写：

name = 'aaa bbb ccc';
uw=name.replace(/\b\w+\b/g, function(word){
  return word.substring(0,1).toUpperCase()+word.substring(1);}
  );

---------------------------------------

定义和用法
slice() 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分。

语法
stringObject.slice(start,end)
参数	描述
start	要抽取的片断的起始下标。如果是负数，则该参数规定的是从字符串的尾部开始算起的位置。也就是说，-1 指字符串的最后一个字符，-2 指倒数第二个字符，以此类推。
end	紧接着要抽取的片段的结尾的下标。若未指定此参数，则要提取的子串包括 start 到原字符串结尾的字符串。如果该参数是负数，那么它规定的是从字符串的尾部开始算起的位置。
返回值
一个新的字符串。包括字符串 stringObject 从 start 开始（包括 start）到 end 结束（不包括 end）为止的所有字符。

说明
String 对象的方法 slice()、substring() 和 substr() （不建议使用）都可返回字符串的指定部分。slice() 比 substring() 要灵活一些，因为它允许使用负数作为参数。slice() 与 substr() 有所不同，因为它用两个字符的位置来指定子串，而 substr() 则用字符位置和长度来指定子串。

还要注意的是，String.slice() 与 Array.slice() 相似。

实例
例子 1
在本例中，我们将提取从位置 6 开始的所有字符：

<script type="text/javascript">

var str="Hello happy world!"
document.write(str.slice(6))

</script>
输出：

happy world!
例子 2
在本例中，我们将提取从位置 6 到位置 11 的所有字符：

<script type="text/javascript">

var str="Hello happy world!"
document.write(str.slice(6,11))

</script>
输出：

happy

-------------------------------------------

定义和用法
split() 方法用于把一个字符串分割成字符串数组。

语法
stringObject.split(separator,howmany)
参数	描述
separator	必需。字符串或正则表达式，从该参数指定的地方分割 stringObject。
howmany	可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。
返回值
一个字符串数组。该数组是通过在 separator 指定的边界处将字符串 stringObject 分割成子串创建的。返回的数组中的字串不包括 separator 自身。

但是，如果 separator 是包含子表达式的正则表达式，那么返回的数组中包括与这些子表达式匹配的字串（但不包括与整个正则表达式匹配的文本）。

提示和注释
注释：如果把空字符串 ("") 用作 separator，那么 stringObject 中的每个字符之间都会被分割。

注释：String.split() 执行的操作与 Array.join 执行的操作是相反的。

实例
例子 1
在本例中，我们将按照不同的方式来分割字符串：

<script type="text/javascript">

var str="How are you doing today?"

document.write(str.split(" ") + "<br />")
document.write(str.split("") + "<br />")
document.write(str.split(" ",3))

</script>
输出：

How,are,you,doing,today?
H,o,w, ,a,r,e, ,y,o,u, ,d,o,i,n,g, ,t,o,d,a,y,?
How,are,you
例子 2
在本例中，我们将分割结构更为复杂的字符串：

"2:3:4:5".split(":")	//将返回["2", "3", "4", "5"]
"|a|b|c".split("|")	//将返回["", "a", "b", "c"]
例子 3
使用下面的代码，可以把句子分割成单词：

var words = sentence.split(' ')
或者使用正则表达式作为 separator：

var words = sentence.split(/\s+/)
例子 4
如果您希望把单词分割为字母，或者把字符串分割为字符，可使用下面的代码：

"hello".split("")	//可返回 ["h", "e", "l", "l", "o"]
若只需要返回一部分字符，请使用 howmany 参数：

"hello".split("", 3)	//可返回 ["h", "e", "l"]


----------------------------------------

定义和用法
substr() 方法可在字符串中抽取从 start 下标开始的指定数目的字符。

语法
stringObject.substr(start,length)
参数	描述
start	必需。要抽取的子串的起始下标。必须是数值。如果是负数，那么该参数声明从字符串的尾部开始算起的位置。也就是说，-1 指字符串中最后一个字符，-2 指倒数第二个字符，以此类推。
length	可选。子串中的字符数。必须是数值。如果省略了该参数，那么返回从 stringObject 的开始位置到结尾的字串。
返回值
一个新的字符串，包含从 stringObject 的 start（包括 start 所指的字符） 处开始的 length 个字符。如果没有指定 length，那么返回的字符串包含从 start 到 stringObject 的结尾的字符。

提示和注释
注释：substr() 的参数指定的是子串的开始位置和长度，因此它可以替代 substring() 和 slice() 来使用。

重要事项：ECMAscript 没有对该方法进行标准化，因此反对使用它。

重要事项：在 IE 4 中，参数 start 的值无效。在这个 BUG 中，start 规定的是第 0 个字符的位置。在之后的版本中，此 BUG 已被修正。

实例
例子 1
在本例中，我们将使用 substr() 从字符串中提取一些字符：

<script type="text/javascript">

var str="Hello world!"
document.write(str.substr(3))

</script>
输出：

lo world!
例子 2
在本例中，我们将使用 substr() 从字符串中提取一些字符：

<script type="text/javascript">

var str="Hello world!"
document.write(str.substr(3,7))

</script>
输出：

lo worl

------------------------------------

定义和用法
substring() 方法用于提取字符串中介于两个指定下标之间的字符。

语法
stringObject.substring(start,stop)
参数	描述
start	必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。
stop	
可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。

如果省略该参数，那么返回的子串会一直到字符串的结尾。

返回值
一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。

说明
substring() 方法返回的子串包括 start 处的字符，但不包括 stop 处的字符。

如果参数 start 与 stop 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。如果 start 比 stop 大，那么该方法在提取子串之前会先交换这两个参数。

提示和注释
重要事项：与 slice() 和 substr() 方法不同的是，substring() 不接受负的参数。

实例
例子 1
在本例中，我们将使用 substring() 从字符串中提取一些字符：

<script type="text/javascript">

var str="Hello world!"
document.write(str.substring(3))

</script>
输出：

lo world!
亲自试一试
例子 2
在本例中，我们将使用 substring() 从字符串中提取一些字符：

<script type="text/javascript">

var str="Hello world!"
document.write(str.substring(3,7))

</script>
输出：

lo w


----------------------------

定义和用法
toLowerCase() 方法用于把字符串转换为小写。

语法
stringObject.toLowerCase()
返回值
一个新的字符串，在其中 stringObject 的所有大写字符全部被转换为了小写字符。

-----------------------------

定义和用法
toUpperCase() 方法用于把字符串转换为大写。

语法
stringObject.toUpperCase()
返回值
一个新的字符串，在其中 stringObject 的所有小写字符全部被转换为了大写字符。





























